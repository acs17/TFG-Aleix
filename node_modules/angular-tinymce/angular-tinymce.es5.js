import { Component, EventEmitter, Inject, InjectionToken, Input, NgModule, NgZone, Output, ViewChild, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Observable as Observable$1 } from 'rxjs/Observable';
import 'rxjs/add/operator/debounceTime';
import 'rxjs/add/operator/skipWhile';
import 'rxjs/add/operator/take';
import 'rxjs/add/observable/interval';
import 'rxjs/add/observable/fromEvent';
import { CommonModule } from '@angular/common';
var TinyMceEvents = (function () {
    function TinyMceEvents() {
    }
    return TinyMceEvents;
}());
TinyMceEvents.Click = 'click';
TinyMceEvents.DblClick = 'dblClick';
TinyMceEvents.MouseDown = 'MouseDown';
TinyMceEvents.MouseUp = 'MouseUp';
TinyMceEvents.MouseMove = 'MouseMove';
TinyMceEvents.MouseOver = 'MouseOver';
TinyMceEvents.MouseOut = 'MouseOut';
TinyMceEvents.MouseEnter = 'MouseEnter';
TinyMceEvents.MouseLeave = 'MouseLeave';
TinyMceEvents.KeyDown = 'KeyDown';
TinyMceEvents.KeyPress = 'KeyPress';
TinyMceEvents.KeyUp = 'KeyUp';
TinyMceEvents.ContextMenu = 'ContextMenu';
TinyMceEvents.Paste = 'Paste';
TinyMceEvents.Init = 'Init';
TinyMceEvents.Focus = 'Focus';
TinyMceEvents.Blur = 'Blur';
TinyMceEvents.BeforeSetContent = 'BeforeSetContent';
TinyMceEvents.SetContent = 'SetContent';
TinyMceEvents.GetContent = 'GetContent';
TinyMceEvents.PreProcess = 'PreProcess';
TinyMceEvents.PostProcess = 'PostProcess';
TinyMceEvents.NodeChange = 'NodeChange';
TinyMceEvents.Undo = 'Undo';
TinyMceEvents.Redo = 'Redo';
TinyMceEvents.Change = 'Change';
TinyMceEvents.Dirty = 'Dirty';
TinyMceEvents.Remove = 'Remove';
TinyMceEvents.ExecCommand = 'ExecCommand';
TinyMceEvents.PastePreProcess = 'PastePreProcess';
TinyMceEvents.PastePostProcess = 'PastePostProcess';
TinyMceEvents.AddEditor = 'AddEditor';
TinyMceEvents.RemoveEditor = 'RemoveEditor';
var TINYMCE_SETTINGS_TOKEN = new InjectionToken('angular-tinymce-settings');
var TinyMceComponent = (function () {
    /**
     * @param {?} _input_settings
     * @param {?} ngZone
     */
    function TinyMceComponent(_input_settings, ngZone) {
        var _this = this;
        this._input_settings = _input_settings;
        this.ngZone = ngZone;
        this.click = new EventEmitter();
        this.dblclick = new EventEmitter();
        this.mousedown = new EventEmitter();
        this.mouseup = new EventEmitter();
        this.mousemove = new EventEmitter();
        this.mouseover = new EventEmitter();
        this.mouseout = new EventEmitter();
        this.mouseenter = new EventEmitter();
        this.mouseleave = new EventEmitter();
        this.keydown = new EventEmitter();
        this.keypress = new EventEmitter();
        this.keyup = new EventEmitter();
        this.contextmenu = new EventEmitter();
        this.paste = new EventEmitter();
        this.init = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.beforesetcontent = new EventEmitter();
        this.setcontent = new EventEmitter();
        this.getcontent = new EventEmitter();
        this.preprocess = new EventEmitter();
        this.postprocess = new EventEmitter();
        this.nodechange = new EventEmitter();
        this.undo = new EventEmitter();
        this.redo = new EventEmitter();
        this.change = new EventEmitter();
        this.dirty = new EventEmitter();
        this.remove = new EventEmitter();
        this.execcommand = new EventEmitter();
        this.pastepreprocess = new EventEmitter();
        this.pastepostprocess = new EventEmitter();
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this._setSettings(this.settings);
        if (!window.tinymce && !document.getElementById('tinymceScript')) {
            var tag = document.createElement('script');
            tag.id = 'tinymceScript';
            tag.setAttribute('src', this.settings.tinymceScriptURL || 'assets/tinymce/tinymce.min.js');
            tag.onload = function () {
                tinymce.baseURL = _this.settings.baseURL;
            };
            document.body.appendChild(tag);
        }
    }
    Object.defineProperty(TinyMceComponent.prototype, "settings", {
        /**
         * @return {?}
         */
        get: function () {
            return this._settings;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            if (value) {
                this._settings = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} obj
     * @return {?}
     */
    TinyMceComponent.prototype.writeValue = function (obj) {
        var /** @type {?} */ val = obj != null ? obj.toString() : '';
        if (this.editor) {
            this.fromWriteValue = true;
            this.editor.setContent(val);
        }
        else {
            this.beforeInitValue = val;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TinyMceComponent.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TinyMceComponent.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    TinyMceComponent.prototype.setDisabledState = function (disabled) {
        this.disabled = disabled;
        this.setEditorMode(disabled);
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    TinyMceComponent.prototype.setEditorMode = function (disabled) {
        if (this.editor) {
            if (disabled) {
                this.editor.setMode('readonly');
            }
            else {
                this.editor.setMode('design');
            }
        }
    };
    /**
     * @param {?} settings
     * @return {?}
     */
    TinyMceComponent.prototype._setSettings = function (settings) {
        var /** @type {?} */ localSettings = settings || this._input_settings || {};
        this.settings = Object.assign({}, localSettings);
        if (((window)).tinymce) {
            tinymce.baseURL = ((this.settings)).baseURL;
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TinyMceComponent.prototype.ngOnChanges = function (changes) {
        var /** @type {?} */ needReinit = false;
        if (changes === null) {
            return;
        }
        if (changes['settings']) {
            if (changes['settings'].currentValue) {
                this._setSettings(changes['settings'].currentValue);
                needReinit = true;
            }
        }
        if (changes['isDisabled']) {
            this.setDisabledState(changes['isDisabled'].currentValue);
        }
        if (needReinit) {
            this.reInitEditor();
        }
    };
    /**
     * @return {?}
     */
    TinyMceComponent.prototype.ngAfterViewInit = function () {
        this.initEditor();
    };
    /**
     * @return {?}
     */
    TinyMceComponent.prototype.initEditor = function () {
        var _this = this;
        this.settings.target = this.elem.nativeElement;
        this.initCallbacks(this.settings);
        Observable$1.interval(300)
            .skipWhile(function () { return !((window)).tinymce; })
            .take(1)
            .subscribe(function () {
            tinymce.init(_this.settings);
        });
    };
    /**
     * @return {?}
     */
    TinyMceComponent.prototype.reInitEditor = function () {
        var _this = this;
        if (this.editor) {
            this.ngZone.run(function () {
                _this.triggerChange(true);
            });
        }
        this.removeEditor();
        this.initEditor();
    };
    /**
     * @param {?} settings
     * @return {?}
     */
    TinyMceComponent.prototype.initCallbacks = function (settings) {
        var _this = this;
        var /** @type {?} */ origSetup = settings.setup;
        settings.setup = function (editor) {
            editor.on(TinyMceEvents.Init, function (e) { return _this.init.emit(e); });
            if (origSetup) {
                origSetup(editor);
            }
        };
        var /** @type {?} */ origInstanceCallback = settings.init_instance_callback;
        settings.init_instance_callback = function (editor) {
            _this.editor = editor;
            _this.setEditorMode(_this.disabled);
            if (_this.beforeInitValue != null) {
                _this.editor.setContent(_this.beforeInitValue);
            }
            if (origInstanceCallback) {
                origInstanceCallback(editor);
            }
            editor.on(TinyMceEvents.Click, function (e) { return _this.click.emit(e); });
            editor.on(TinyMceEvents.DblClick, function (e) { return _this.dblclick.emit(e); });
            editor.on(TinyMceEvents.MouseDown, function (e) { return _this.mousedown.emit(e); });
            editor.on(TinyMceEvents.MouseUp, function (e) { return _this.mouseup.emit(e); });
            editor.on(TinyMceEvents.MouseMove, function (e) { return _this.mousemove.emit(e); });
            editor.on(TinyMceEvents.MouseOver, function (e) { return _this.mouseover.emit(e); });
            editor.on(TinyMceEvents.MouseOut, function (e) { return _this.mouseout.emit(e); });
            editor.on(TinyMceEvents.MouseEnter, function (e) { return _this.mouseenter.emit(e); });
            editor.on(TinyMceEvents.MouseLeave, function (e) { return _this.mouseleave.emit(e); });
            editor.on(TinyMceEvents.KeyDown, function (e) { return _this.keydown.emit(e); });
            editor.on(TinyMceEvents.KeyPress, function (e) { return _this.keypress.emit(e); });
            editor.on(TinyMceEvents.KeyUp, function (e) {
                _this.ngZone.run(function () {
                    _this.triggerChange();
                });
                _this.keyup.emit(e);
            });
            editor.on(TinyMceEvents.ContextMenu, function (e) { return _this.contextmenu.emit(e); });
            editor.on(TinyMceEvents.Paste, function (e) { return _this.paste.emit(e); });
            editor.on(TinyMceEvents.Focus, function (e) { return _this.focus.emit(e); });
            editor.on(TinyMceEvents.Blur, function (e) { return _this.blur.emit(e); });
            editor.on(TinyMceEvents.BeforeSetContent, function (e) { return _this.beforesetcontent.emit(e); });
            editor.on(TinyMceEvents.SetContent, function (e) {
                _this.ngZone.run(function () {
                    _this.triggerChange();
                });
                _this.setcontent.emit(e);
            });
            editor.on(TinyMceEvents.GetContent, function (e) { return _this.getcontent.emit(e); });
            editor.on(TinyMceEvents.PreProcess, function (e) { return _this.preprocess.emit(e); });
            editor.on(TinyMceEvents.PostProcess, function (e) { return _this.postprocess.emit(e); });
            editor.on(TinyMceEvents.NodeChange, function (e) { return _this.nodechange.emit(e); });
            editor.on(TinyMceEvents.Undo, function (e) { return _this.undo.emit(e); });
            editor.on(TinyMceEvents.Redo, function (e) { return _this.redo.emit(e); });
            editor.on(TinyMceEvents.Change, function (e) {
                _this.ngZone.run(function () {
                    _this.triggerChange();
                });
                _this.change.emit(e);
            });
            editor.on(TinyMceEvents.Dirty, function (e) { return _this.dirty.emit(e); });
            editor.on(TinyMceEvents.Remove, function (e) { return _this.remove.emit(e); });
            editor.on(TinyMceEvents.ExecCommand, function (e) {
                _this.ngZone.run(function () {
                    _this.triggerChange();
                });
                _this.execcommand.emit(e);
            });
            editor.on(TinyMceEvents.PastePreProcess, function (e) { return _this.pastepreprocess.emit(e); });
            editor.on(TinyMceEvents.PastePostProcess, function (e) { return _this.pastepostprocess.emit(e); });
        };
    };
    /**
     * @param {?=} forReInit
     * @return {?}
     */
    TinyMceComponent.prototype.triggerChange = function (forReInit) {
        if (forReInit === void 0) { forReInit = false; }
        if (this.fromWriteValue) {
            this.fromWriteValue = false;
        }
        else {
            var /** @type {?} */ content = this.editor.getContent();
            if (!content) {
                content = '';
            }
            if (forReInit) {
                this.beforeInitValue = content;
            }
            this.onModelChange(content);
            this.onModelTouched();
        }
    };
    /**
     * @return {?}
     */
    TinyMceComponent.prototype.removeEditor = function () {
        if (this.editor) {
            ((tinymce)).remove(this.editor);
        }
    };
    /**
     * @return {?}
     */
    TinyMceComponent.prototype.ngOnDestroy = function () {
        this.removeEditor();
    };
    return TinyMceComponent;
}());
TinyMceComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular-tinymce',
                template: "<textarea #tinymce ></textarea>",
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return TinyMceComponent; }),
                        multi: true
                    }]
            },] },
];
/**
 * @nocollapse
 */
TinyMceComponent.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [TINYMCE_SETTINGS_TOKEN,] },] },
    { type: NgZone, },
]; };
TinyMceComponent.propDecorators = {
    'isDisabled': [{ type: Input },],
    'settings': [{ type: Input },],
    'selector': [{ type: Input },],
    'click': [{ type: Output },],
    'dblclick': [{ type: Output },],
    'mousedown': [{ type: Output },],
    'mouseup': [{ type: Output },],
    'mousemove': [{ type: Output },],
    'mouseover': [{ type: Output },],
    'mouseout': [{ type: Output },],
    'mouseenter': [{ type: Output },],
    'mouseleave': [{ type: Output },],
    'keydown': [{ type: Output },],
    'keypress': [{ type: Output },],
    'keyup': [{ type: Output },],
    'contextmenu': [{ type: Output },],
    'paste': [{ type: Output },],
    'init': [{ type: Output },],
    'focus': [{ type: Output },],
    'blur': [{ type: Output },],
    'beforesetcontent': [{ type: Output },],
    'setcontent': [{ type: Output },],
    'getcontent': [{ type: Output },],
    'preprocess': [{ type: Output },],
    'postprocess': [{ type: Output },],
    'nodechange': [{ type: Output },],
    'undo': [{ type: Output },],
    'redo': [{ type: Output },],
    'change': [{ type: Output },],
    'dirty': [{ type: Output },],
    'remove': [{ type: Output },],
    'execcommand': [{ type: Output },],
    'pastepreprocess': [{ type: Output },],
    'pastepostprocess': [{ type: Output },],
    'elem': [{ type: ViewChild, args: ['tinymce',] },],
};
/**
 * @return {?}
 */
function tinymceDefaultSettings() {
    return {
        baseURL: '/assets/tinymce',
        tinymceScriptURL: '/assets/tinymce/tinymce.min.js',
        theme_url: '/assets/tinymce/themes/modern/theme.min.js',
        skin_url: '/assets/tinymce/skins/lightgray'
    };
}
/**
 * Modul für ein TinyMce Input
 */
var TinyMceModule = (function () {
    function TinyMceModule() {
    }
    /**
     * @param {?} settings
     * @return {?}
     */
    TinyMceModule.forRoot = function (settings) {
        return {
            ngModule: TinyMceModule,
            providers: [
                { provide: TINYMCE_SETTINGS_TOKEN, useValue: settings }
            ]
        };
    };
    return TinyMceModule;
}());
TinyMceModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [TinyMceComponent],
                exports: [TinyMceComponent]
            },] },
];
/**
 * @nocollapse
 */
TinyMceModule.ctorParameters = function () { return []; };
/**
 * Generated bundle index. Do not edit.
 */
export { TinyMceComponent, TINYMCE_SETTINGS_TOKEN, tinymceDefaultSettings, TinyMceEvents, TinyMceModule };
//# sourceMappingURL=angular-tinymce.es5.js.map
