{"version":3,"file":"angular-tinymce.umd.min.js","sources":["~/angular-tinymce/src/tinymce.events.ts","~/angular-tinymce/src/tinymce.component.ts","~/angular-tinymce/src/tinymce.module.ts","~/angular-tinymce/src/tinymce.default.ts"],"sourcesContent":["\nexport class TinyMceEvents {\npublic static Click = 'click';\npublic static DblClick = 'dblClick';\npublic static MouseDown = 'MouseDown';\npublic static MouseUp = 'MouseUp';\npublic static MouseMove = 'MouseMove';\npublic static MouseOver = 'MouseOver';\npublic static MouseOut = 'MouseOut';\npublic static MouseEnter = 'MouseEnter';\npublic static MouseLeave = 'MouseLeave';\npublic static KeyDown = 'KeyDown';\npublic static KeyPress = 'KeyPress';\npublic static KeyUp = 'KeyUp';\npublic static ContextMenu = 'ContextMenu';\npublic static Paste = 'Paste';\npublic static Init = 'Init';\npublic static Focus = 'Focus';\npublic static Blur = 'Blur';\npublic static BeforeSetContent = 'BeforeSetContent';\npublic static SetContent = 'SetContent';\npublic static GetContent = 'GetContent';\npublic static PreProcess = 'PreProcess';\npublic static PostProcess = 'PostProcess';\npublic static NodeChange = 'NodeChange';\npublic static Undo = 'Undo';\npublic static Redo = 'Redo';\npublic static Change = 'Change';\npublic static Dirty = 'Dirty';\npublic static Remove = 'Remove';\npublic static ExecCommand = 'ExecCommand';\npublic static PastePreProcess = 'PastePreProcess';\npublic static PastePostProcess = 'PastePostProcess';\npublic static AddEditor = 'AddEditor';\npublic static RemoveEditor = 'RemoveEditor';\n}\n\nfunction TinyMceEvents_tsickle_Closure_declarations() {\n/** @type {?} */\nTinyMceEvents.Click;\n/** @type {?} */\nTinyMceEvents.DblClick;\n/** @type {?} */\nTinyMceEvents.MouseDown;\n/** @type {?} */\nTinyMceEvents.MouseUp;\n/** @type {?} */\nTinyMceEvents.MouseMove;\n/** @type {?} */\nTinyMceEvents.MouseOver;\n/** @type {?} */\nTinyMceEvents.MouseOut;\n/** @type {?} */\nTinyMceEvents.MouseEnter;\n/** @type {?} */\nTinyMceEvents.MouseLeave;\n/** @type {?} */\nTinyMceEvents.KeyDown;\n/** @type {?} */\nTinyMceEvents.KeyPress;\n/** @type {?} */\nTinyMceEvents.KeyUp;\n/** @type {?} */\nTinyMceEvents.ContextMenu;\n/** @type {?} */\nTinyMceEvents.Paste;\n/** @type {?} */\nTinyMceEvents.Init;\n/** @type {?} */\nTinyMceEvents.Focus;\n/** @type {?} */\nTinyMceEvents.Blur;\n/** @type {?} */\nTinyMceEvents.BeforeSetContent;\n/** @type {?} */\nTinyMceEvents.SetContent;\n/** @type {?} */\nTinyMceEvents.GetContent;\n/** @type {?} */\nTinyMceEvents.PreProcess;\n/** @type {?} */\nTinyMceEvents.PostProcess;\n/** @type {?} */\nTinyMceEvents.NodeChange;\n/** @type {?} */\nTinyMceEvents.Undo;\n/** @type {?} */\nTinyMceEvents.Redo;\n/** @type {?} */\nTinyMceEvents.Change;\n/** @type {?} */\nTinyMceEvents.Dirty;\n/** @type {?} */\nTinyMceEvents.Remove;\n/** @type {?} */\nTinyMceEvents.ExecCommand;\n/** @type {?} */\nTinyMceEvents.PastePreProcess;\n/** @type {?} */\nTinyMceEvents.PastePostProcess;\n/** @type {?} */\nTinyMceEvents.AddEditor;\n/** @type {?} */\nTinyMceEvents.RemoveEditor;\n}\n\n","import {\n  Component,\n  NgZone,\n  forwardRef,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  SimpleChange,\n  Inject,\n  AfterViewInit,\n  OnDestroy,\n  InjectionToken,\n  ViewChild,\n  ElementRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/debounceTime';\nimport'rxjs/add/operator/skipWhile';\nimport'rxjs/add/operator/take';\nimport'rxjs/add/observable/interval';\nimport'rxjs/add/observable/fromEvent';\n\nimport { TinyMceEvents } from './tinymce.events';\n\nimport * as TinyMce from 'tinymce';\ndeclare var tinymce: TinyMce.EditorManager;\n\nexport const /** @type {?} */ TINYMCE_SETTINGS_TOKEN = new InjectionToken('angular-tinymce-settings');\nexport class TinyMceComponent implements ControlValueAccessor, AfterViewInit, OnDestroy, OnChanges {\n\n  beforeInitValue: string;\n  disabled: boolean;\n  fromWriteValue: boolean;\n\n  \n  isDisabled: boolean;\nprivate _settings: TinyMce.Settings;\n/**\n * @return {?}\n */\nget settings(): TinyMce.Settings {\n    return this._settings;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset settings(value) {\n    if (value) {\n      this._settings = value;\n    }\n  }\n   selector: string;\npublic click: EventEmitter<MouseEvent> = new EventEmitter();\npublic dblclick: EventEmitter<MouseEvent> = new EventEmitter();\npublic mousedown: EventEmitter<MouseEvent> = new EventEmitter();\npublic mouseup: EventEmitter<MouseEvent> = new EventEmitter();\npublic mousemove: EventEmitter<MouseEvent> = new EventEmitter();\npublic mouseover: EventEmitter<MouseEvent> = new EventEmitter();\npublic mouseout: EventEmitter<MouseEvent> = new EventEmitter();\npublic mouseenter: EventEmitter<MouseEvent> = new EventEmitter();\npublic mouseleave: EventEmitter<MouseEvent> = new EventEmitter();\npublic keydown: EventEmitter<KeyboardEvent> = new EventEmitter();\npublic keypress: EventEmitter<KeyboardEvent> = new EventEmitter();\npublic keyup: EventEmitter<KeyboardEvent> = new EventEmitter();\npublic contextmenu: EventEmitter<MouseEvent> = new EventEmitter();\npublic paste: EventEmitter<ClipboardEvent> = new EventEmitter();\npublic init: EventEmitter<TinyMce.Events.Event> = new EventEmitter();\npublic focus: EventEmitter<TinyMce.Events.FocusBlurEvent> = new EventEmitter();\npublic blur: EventEmitter<TinyMce.Events.FocusBlurEvent> = new EventEmitter();\npublic beforesetcontent: EventEmitter<TinyMce.Events.ContentEvent> = new EventEmitter();\npublic setcontent: EventEmitter<TinyMce.Events.ContentEvent> = new EventEmitter();\npublic getcontent: EventEmitter<TinyMce.Events.ContentEvent> = new EventEmitter();\npublic preprocess: EventEmitter<TinyMce.Events.ProcessEvent> = new EventEmitter();\npublic postprocess: EventEmitter<TinyMce.Events.ProcessEvent> = new EventEmitter();\npublic nodechange: EventEmitter<TinyMce.Events.NodeChangeEvent> = new EventEmitter();\npublic undo: EventEmitter<TinyMce.Events.UndoRedoEvent> = new EventEmitter();\npublic redo: EventEmitter<TinyMce.Events.UndoRedoEvent> = new EventEmitter();\npublic change: EventEmitter<TinyMce.Events.ChangeEvent> = new EventEmitter();\npublic dirty: EventEmitter<TinyMce.Events.Event> = new EventEmitter();\npublic remove: EventEmitter<TinyMce.Events.Event> = new EventEmitter();\npublic execcommand: EventEmitter<TinyMce.Events.CommandEvent> = new EventEmitter();\npublic pastepreprocess: EventEmitter<TinyMce.Events.ContentEvent> = new EventEmitter();\npublic pastepostprocess: EventEmitter<TinyMce.Events.ContentEvent> = new EventEmitter();\n\n  editor: TinyMce.Editor;\n   elem: ElementRef;\n/**\n * @param {?} obj\n * @return {?}\n */\nwriteValue(obj: any): void {\n    const /** @type {?} */ val = obj != null ? obj.toString() : '';\n    if (this.editor) {\n      this.fromWriteValue = true;\n      this.editor.setContent(val);\n    } else {\n      this.beforeInitValue = val;\n    }\n  }\n\n  onModelChange: Function = () => { };\n  onModelTouched: Function = () => { };\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState?(disabled: boolean): void {\n    this.disabled = disabled;\n    this.setEditorMode(disabled);\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetEditorMode(disabled: boolean) {\n    if (this.editor) {\n      if (disabled) {\n        this.editor.setMode('readonly');\n      } else {\n        this.editor.setMode('design');\n      }\n    }\n  }\n/**\n * @param {?} _input_settings\n * @param {?} ngZone\n */\nconstructor(\nprivate _input_settings: any,\nprivate ngZone: NgZone) {\n\n    this._setSettings(this.settings);\n\n    if (!(window as any).tinymce && !document.getElementById('tinymceScript')) {\n      const tag = document.createElement('script');\n      tag.id = 'tinymceScript';\n      tag.setAttribute('src', (this.settings as any).tinymceScriptURL || 'assets/tinymce/tinymce.min.js');\n      tag.onload = () => {\n        tinymce.baseURL = (this.settings as any).baseURL;\n      };\n      document.body.appendChild(tag);\n    }\n  }\n/**\n * @param {?} settings\n * @return {?}\n */\nprivate _setSettings(settings: any) {\n    const /** @type {?} */ localSettings = settings || this._input_settings || {};\n    this.settings = Object.assign({}, localSettings);\n    if (( /** @type {?} */((window as any))).tinymce) {\n      tinymce.baseURL = ( /** @type {?} */((this.settings as any))).baseURL;\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    let /** @type {?} */ needReinit = false;\n    if (changes === null) {\n      return;\n    }\n\n    if (changes['settings']) {\n      if (changes['settings'].currentValue) {\n        this._setSettings(changes['settings'].currentValue);\n        needReinit = true;\n      }\n    }\n    if (changes['isDisabled']) {\n      this.setDisabledState(changes['isDisabled'].currentValue);\n    }\n\n    if (needReinit) {\n      this.reInitEditor();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\n    this.initEditor();\n  }\n/**\n * @return {?}\n */\ninitEditor(): void {\n    this.settings.target = this.elem.nativeElement;\n    this.initCallbacks(this.settings);\n    Observable.interval(300)\n      .skipWhile(() => !( /** @type {?} */((window as any))).tinymce)\n      .take(1)\n      .subscribe(() => {\n        tinymce.init(this.settings);\n      });\n  }\n/**\n * @return {?}\n */\nreInitEditor(): void {\n    if (this.editor) {\n      this.ngZone.run(() => {\n        this.triggerChange(true);\n      });\n    }\n\n    this.removeEditor();\n    this.initEditor();\n  }\n/**\n * @param {?} settings\n * @return {?}\n */\ninitCallbacks(settings: TinyMce.Settings): void {\n\n    const /** @type {?} */ origSetup = settings.setup;\n    settings.setup = (editor: TinyMce.Editor) => {\n      editor.on(TinyMceEvents.Init, (e: TinyMce.Events.Event) => this.init.emit(e));\n      if (origSetup) {\n        origSetup(editor);\n      }\n    };\n\n    const /** @type {?} */ origInstanceCallback = settings.init_instance_callback;\n    settings.init_instance_callback = (editor: TinyMce.Editor) => {\n      this.editor = editor;\n      this.setEditorMode(this.disabled);\n      if (this.beforeInitValue != null) {\n        this.editor.setContent(this.beforeInitValue);\n      }\n      if (origInstanceCallback) {\n        origInstanceCallback(editor);\n      }\n\n      editor.on(TinyMceEvents.Click, (e: MouseEvent) => this.click.emit(e));\n      editor.on(TinyMceEvents.DblClick, (e: MouseEvent) => this.dblclick.emit(e));\n      editor.on(TinyMceEvents.MouseDown, (e: MouseEvent) => this.mousedown.emit(e));\n      editor.on(TinyMceEvents.MouseUp, (e: MouseEvent) => this.mouseup.emit(e));\n      editor.on(TinyMceEvents.MouseMove, (e: MouseEvent) => this.mousemove.emit(e));\n      editor.on(TinyMceEvents.MouseOver, (e: MouseEvent) => this.mouseover.emit(e));\n      editor.on(TinyMceEvents.MouseOut, (e: MouseEvent) => this.mouseout.emit(e));\n      editor.on(TinyMceEvents.MouseEnter, (e: MouseEvent) => this.mouseenter.emit(e));\n      editor.on(TinyMceEvents.MouseLeave, (e: MouseEvent) => this.mouseleave.emit(e));\n      editor.on(TinyMceEvents.KeyDown, (e: KeyboardEvent) => this.keydown.emit(e));\n      editor.on(TinyMceEvents.KeyPress, (e: KeyboardEvent) => this.keypress.emit(e));\n      editor.on(TinyMceEvents.KeyUp, (e: KeyboardEvent) => {\n        this.ngZone.run(() => {\n          this.triggerChange();\n        });\n        this.keyup.emit(e);\n      });\n      editor.on(TinyMceEvents.ContextMenu, (e: MouseEvent) => this.contextmenu.emit(e));\n      editor.on(TinyMceEvents.Paste, (e: ClipboardEvent) => this.paste.emit(e));\n\n      editor.on(TinyMceEvents.Focus, (e: TinyMce.Events.FocusBlurEvent) => this.focus.emit(e));\n      editor.on(TinyMceEvents.Blur, (e: TinyMce.Events.FocusBlurEvent) => this.blur.emit(e));\n      editor.on(TinyMceEvents.BeforeSetContent, (e: TinyMce.Events.ContentEvent) => this.beforesetcontent.emit(e));\n      editor.on(TinyMceEvents.SetContent, (e: TinyMce.Events.ContentEvent) => {\n        this.ngZone.run(() => {\n          this.triggerChange();\n        });\n        this.setcontent.emit(e);\n      });\n      editor.on(TinyMceEvents.GetContent, (e: TinyMce.Events.ContentEvent) => this.getcontent.emit(e));\n      editor.on(TinyMceEvents.PreProcess, (e: TinyMce.Events.ProcessEvent) => this.preprocess.emit(e));\n      editor.on(TinyMceEvents.PostProcess, (e: TinyMce.Events.ProcessEvent) => this.postprocess.emit(e));\n      editor.on(TinyMceEvents.NodeChange, (e: TinyMce.Events.NodeChangeEvent) => this.nodechange.emit(e));\n      editor.on(TinyMceEvents.Undo, (e: TinyMce.Events.UndoRedoEvent) => this.undo.emit(e));\n      editor.on(TinyMceEvents.Redo, (e: TinyMce.Events.UndoRedoEvent) => this.redo.emit(e));\n      editor.on(TinyMceEvents.Change, (e: TinyMce.Events.ChangeEvent) => {\n        this.ngZone.run(() => {\n          this.triggerChange();\n        });\n        this.change.emit(e);\n      });\n      editor.on(TinyMceEvents.Dirty, (e: TinyMce.Events.Event) => this.dirty.emit(e));\n      editor.on(TinyMceEvents.Remove, (e: TinyMce.Events.Event) => this.remove.emit(e));\n      editor.on(TinyMceEvents.ExecCommand, (e: TinyMce.Events.CommandEvent) => {\n        this.ngZone.run(() => {\n          this.triggerChange();\n        });\n        this.execcommand.emit(e);\n      });\n      editor.on(TinyMceEvents.PastePreProcess, (e: TinyMce.Events.ContentEvent) => this.pastepreprocess.emit(e));\n      editor.on(TinyMceEvents.PastePostProcess, (e: TinyMce.Events.ContentEvent) => this.pastepostprocess.emit(e));\n    };\n  }\n/**\n * @param {?=} forReInit\n * @return {?}\n */\ntriggerChange(forReInit = false) {\n    if (this.fromWriteValue) {\n      this.fromWriteValue = false;\n    } else {\n      let /** @type {?} */ content = this.editor.getContent();\n      if (!content) {\n        content = '';\n      }\n      if (forReInit) {\n        this.beforeInitValue = content;\n      }\n      this.onModelChange(content);\n      this.onModelTouched();\n    }\n  }\n/**\n * @return {?}\n */\nremoveEditor(): void {\n    if (this.editor) {\n      ( /** @type {?} */((tinymce as any))).remove(this.editor);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.removeEditor();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'angular-tinymce',\n  template: `<textarea #tinymce ></textarea>`,\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TinyMceComponent),\n    multi: true\n  }]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [TINYMCE_SETTINGS_TOKEN, ] }, ]},\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'isDisabled': [{ type: Input },],\n'settings': [{ type: Input },],\n'selector': [{ type: Input },],\n'click': [{ type: Output },],\n'dblclick': [{ type: Output },],\n'mousedown': [{ type: Output },],\n'mouseup': [{ type: Output },],\n'mousemove': [{ type: Output },],\n'mouseover': [{ type: Output },],\n'mouseout': [{ type: Output },],\n'mouseenter': [{ type: Output },],\n'mouseleave': [{ type: Output },],\n'keydown': [{ type: Output },],\n'keypress': [{ type: Output },],\n'keyup': [{ type: Output },],\n'contextmenu': [{ type: Output },],\n'paste': [{ type: Output },],\n'init': [{ type: Output },],\n'focus': [{ type: Output },],\n'blur': [{ type: Output },],\n'beforesetcontent': [{ type: Output },],\n'setcontent': [{ type: Output },],\n'getcontent': [{ type: Output },],\n'preprocess': [{ type: Output },],\n'postprocess': [{ type: Output },],\n'nodechange': [{ type: Output },],\n'undo': [{ type: Output },],\n'redo': [{ type: Output },],\n'change': [{ type: Output },],\n'dirty': [{ type: Output },],\n'remove': [{ type: Output },],\n'execcommand': [{ type: Output },],\n'pastepreprocess': [{ type: Output },],\n'pastepostprocess': [{ type: Output },],\n'elem': [{ type: ViewChild, args: ['tinymce', ] },],\n};\n}\n\nfunction TinyMceComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTinyMceComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTinyMceComponent.ctorParameters;\n/** @type {?} */\nTinyMceComponent.propDecorators;\n/** @type {?} */\nTinyMceComponent.prototype.beforeInitValue;\n/** @type {?} */\nTinyMceComponent.prototype.disabled;\n/** @type {?} */\nTinyMceComponent.prototype.fromWriteValue;\n/** @type {?} */\nTinyMceComponent.prototype.isDisabled;\n/** @type {?} */\nTinyMceComponent.prototype._settings;\n/** @type {?} */\nTinyMceComponent.prototype.selector;\n/** @type {?} */\nTinyMceComponent.prototype.click;\n/** @type {?} */\nTinyMceComponent.prototype.dblclick;\n/** @type {?} */\nTinyMceComponent.prototype.mousedown;\n/** @type {?} */\nTinyMceComponent.prototype.mouseup;\n/** @type {?} */\nTinyMceComponent.prototype.mousemove;\n/** @type {?} */\nTinyMceComponent.prototype.mouseover;\n/** @type {?} */\nTinyMceComponent.prototype.mouseout;\n/** @type {?} */\nTinyMceComponent.prototype.mouseenter;\n/** @type {?} */\nTinyMceComponent.prototype.mouseleave;\n/** @type {?} */\nTinyMceComponent.prototype.keydown;\n/** @type {?} */\nTinyMceComponent.prototype.keypress;\n/** @type {?} */\nTinyMceComponent.prototype.keyup;\n/** @type {?} */\nTinyMceComponent.prototype.contextmenu;\n/** @type {?} */\nTinyMceComponent.prototype.paste;\n/** @type {?} */\nTinyMceComponent.prototype.init;\n/** @type {?} */\nTinyMceComponent.prototype.focus;\n/** @type {?} */\nTinyMceComponent.prototype.blur;\n/** @type {?} */\nTinyMceComponent.prototype.beforesetcontent;\n/** @type {?} */\nTinyMceComponent.prototype.setcontent;\n/** @type {?} */\nTinyMceComponent.prototype.getcontent;\n/** @type {?} */\nTinyMceComponent.prototype.preprocess;\n/** @type {?} */\nTinyMceComponent.prototype.postprocess;\n/** @type {?} */\nTinyMceComponent.prototype.nodechange;\n/** @type {?} */\nTinyMceComponent.prototype.undo;\n/** @type {?} */\nTinyMceComponent.prototype.redo;\n/** @type {?} */\nTinyMceComponent.prototype.change;\n/** @type {?} */\nTinyMceComponent.prototype.dirty;\n/** @type {?} */\nTinyMceComponent.prototype.remove;\n/** @type {?} */\nTinyMceComponent.prototype.execcommand;\n/** @type {?} */\nTinyMceComponent.prototype.pastepreprocess;\n/** @type {?} */\nTinyMceComponent.prototype.pastepostprocess;\n/** @type {?} */\nTinyMceComponent.prototype.editor;\n/** @type {?} */\nTinyMceComponent.prototype.elem;\n/** @type {?} */\nTinyMceComponent.prototype.onModelChange;\n/** @type {?} */\nTinyMceComponent.prototype.onModelTouched;\n/** @type {?} */\nTinyMceComponent.prototype._input_settings;\n/** @type {?} */\nTinyMceComponent.prototype.ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport * as TinyMce from 'tinymce';\n\nimport { TinyMceComponent, TINYMCE_SETTINGS_TOKEN } from './tinymce.component';\n/**\n * Modul für ein TinyMce Input\n */\nexport class TinyMceModule {\n/**\n * @param {?} settings\n * @return {?}\n */\nstatic forRoot(settings: TinyMce.Settings): ModuleWithProviders {\n  return {\n    ngModule: TinyMceModule,\n    providers: [\n      { provide: TINYMCE_SETTINGS_TOKEN, useValue: settings }\n    ]\n  };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  declarations: [TinyMceComponent],\n  exports: [TinyMceComponent]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TinyMceModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTinyMceModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTinyMceModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import * as TinyMce from 'tinymce';\n/**\n * @return {?}\n */\nexport function tinymceDefaultSettings(): TinyMce.Settings | any {\n  return {\n    baseURL: '/assets/tinymce',\n    tinymceScriptURL: '/assets/tinymce/tinymce.min.js',\n    theme_url: '/assets/tinymce/themes/modern/theme.min.js',\n    skin_url: '/assets/tinymce/skins/lightgray'\n  };\n}\n"],"names":["TinyMceEvents","Click","DblClick","MouseDown","MouseUp","MouseMove","MouseOver","MouseOut","MouseEnter","MouseLeave","KeyDown","KeyPress","KeyUp","ContextMenu","Paste","Init","Focus","Blur","BeforeSetContent","SetContent","GetContent","PreProcess","PostProcess","NodeChange","Undo","Redo","Change","Dirty","Remove","ExecCommand","PastePreProcess","PastePostProcess","AddEditor","RemoveEditor","TINYMCE_SETTINGS_TOKEN","InjectionToken","TinyMceComponent","_input_settings","ngZone","_this","this","click","EventEmitter","dblclick","mousedown","mouseup","mousemove","mouseover","mouseout","mouseenter","mouseleave","keydown","keypress","keyup","contextmenu","paste","init","focus","blur","beforesetcontent","setcontent","getcontent","preprocess","postprocess","nodechange","undo","redo","change","dirty","remove","execcommand","pastepreprocess","pastepostprocess","onModelChange","onModelTouched","_setSettings","settings","window","tinymce","document","getElementById","tag","createElement","id","setAttribute","tinymceScriptURL","onload","baseURL","body","appendChild","Object","defineProperty","prototype","get","_settings","set","value","writeValue","obj","val","toString","editor","fromWriteValue","setContent","beforeInitValue","registerOnChange","fn","registerOnTouched","setDisabledState","disabled","setEditorMode","setMode","localSettings","assign","ngOnChanges","changes","needReinit","currentValue","reInitEditor","ngAfterViewInit","initEditor","target","elem","nativeElement","initCallbacks","Observable","interval","skipWhile","take","subscribe","run","triggerChange","removeEditor","origSetup","setup","on","e","emit","origInstanceCallback","init_instance_callback","forReInit","content","getContent","ngOnDestroy","decorators","type","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ctorParameters","undefined","Inject","NgZone","propDecorators","isDisabled","Input","Output","ViewChild","TinyMceModule","forRoot","ngModule","useValue","NgModule","imports","CommonModule","declarations","exports","theme_url","skin_url"],"mappings":"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"}
