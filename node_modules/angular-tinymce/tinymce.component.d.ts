import { NgZone, EventEmitter, OnChanges, SimpleChanges, AfterViewInit, OnDestroy, InjectionToken, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import 'rxjs/add/operator/debounceTime';
import 'rxjs/add/operator/skipWhile';
import 'rxjs/add/operator/take';
import 'rxjs/add/observable/interval';
import 'rxjs/add/observable/fromEvent';
import * as TinyMce from 'tinymce';
export declare const TINYMCE_SETTINGS_TOKEN: InjectionToken<{}>;
export declare class TinyMceComponent implements ControlValueAccessor, AfterViewInit, OnDestroy, OnChanges {
    private _input_settings;
    private ngZone;
    beforeInitValue: string;
    disabled: boolean;
    fromWriteValue: boolean;
    isDisabled: boolean;
    private _settings;
    settings: TinyMce.Settings;
    selector: string;
    click: EventEmitter<MouseEvent>;
    dblclick: EventEmitter<MouseEvent>;
    mousedown: EventEmitter<MouseEvent>;
    mouseup: EventEmitter<MouseEvent>;
    mousemove: EventEmitter<MouseEvent>;
    mouseover: EventEmitter<MouseEvent>;
    mouseout: EventEmitter<MouseEvent>;
    mouseenter: EventEmitter<MouseEvent>;
    mouseleave: EventEmitter<MouseEvent>;
    keydown: EventEmitter<KeyboardEvent>;
    keypress: EventEmitter<KeyboardEvent>;
    keyup: EventEmitter<KeyboardEvent>;
    contextmenu: EventEmitter<MouseEvent>;
    paste: EventEmitter<ClipboardEvent>;
    init: EventEmitter<TinyMce.Events.Event>;
    focus: EventEmitter<TinyMce.Events.FocusBlurEvent>;
    blur: EventEmitter<TinyMce.Events.FocusBlurEvent>;
    beforesetcontent: EventEmitter<TinyMce.Events.ContentEvent>;
    setcontent: EventEmitter<TinyMce.Events.ContentEvent>;
    getcontent: EventEmitter<TinyMce.Events.ContentEvent>;
    preprocess: EventEmitter<TinyMce.Events.ProcessEvent>;
    postprocess: EventEmitter<TinyMce.Events.ProcessEvent>;
    nodechange: EventEmitter<TinyMce.Events.NodeChangeEvent>;
    undo: EventEmitter<TinyMce.Events.UndoRedoEvent>;
    redo: EventEmitter<TinyMce.Events.UndoRedoEvent>;
    change: EventEmitter<TinyMce.Events.ChangeEvent>;
    dirty: EventEmitter<TinyMce.Events.Event>;
    remove: EventEmitter<TinyMce.Events.Event>;
    execcommand: EventEmitter<TinyMce.Events.CommandEvent>;
    pastepreprocess: EventEmitter<TinyMce.Events.ContentEvent>;
    pastepostprocess: EventEmitter<TinyMce.Events.ContentEvent>;
    editor: TinyMce.Editor;
    elem: ElementRef;
    writeValue(obj: any): void;
    onModelChange: Function;
    onModelTouched: Function;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(disabled: boolean): void;
    setEditorMode(disabled: boolean): void;
    constructor(_input_settings: any, ngZone: NgZone);
    private _setSettings(settings);
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    initEditor(): void;
    reInitEditor(): void;
    initCallbacks(settings: TinyMce.Settings): void;
    triggerChange(forReInit?: boolean): void;
    removeEditor(): void;
    ngOnDestroy(): void;
}
